"""
Реализовать программу работы с органическими клетками, состоящими из ячеек. Необходимо создать класс Клетка.
В его конструкторе инициализировать параметр, соответствующий количеству ячеек клетки (целое число). В классе должны
быть реализованы методы перегрузки арифметических операторов: сложение (add()), вычитание (sub()), умножение (mul()),
деление (truediv()). Данные методы должны применяться только к клеткам и выполнять увеличение, уменьшение, умножение и
целочисленное (с округлением до целого) деление клеток, соответственно.
Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух клеток.
Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность количества ячеек двух клеток больше
 нуля, иначе выводить соответствующее сообщение.
Умножение. Создается общая клетка из двух. Число ячеек общей клетки определяется как произведение количества ячеек этих
 двух клеток.
Деление. Создается общая клетка из двух. Число ячеек общей клетки определяется как целочисленное деление количества
ячеек этих двух клеток.
В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду. Данный
метод позволяет организовать ячейки по рядам.
Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно переданному аргументу.
Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5. Тогда метод make_order() вернет строку: *****\n*****\n**.
Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5. Тогда метод make_order() вернет строку: *****\n*****\n*****
"""
class Coop:
    count_cell: int

    def __init__(self, count_cell: int):
        assert count_cell > 0, "Количество должно быть больше 0"
        self.count_cell = count_cell

    def __str__(self):
        return f"Результат операции: {self.count_cell}"

    def __add__(self, other):
        return Coop(self.count_cell + other.count_cell)

    def __sub__(self, other):
        if self.count_cell < other.count_cell:
            print("Операция невозможна!")
        else:
            return Coop(self.count_cell - other.count_cell)

    def __mul__(self, other):
        return Coop(self.count_cell * other.count_cell)

    def __truediv__(self, other):
        return Coop(round(self.count_cell / other.count_cell))

    def make_order(self, cells_row):
        row = ''
        for el in range(int(self.count_cell / cells_row)):
            row += f'{"*" * cells_row} \\n'
        row += f'{"*" * (self.count_cell % cells_row)}'
        return row

coop_1 = Coop(20)
coop_2 = Coop(12)

print(coop_1 + coop_2)
print(coop_1 - coop_2)
print(coop_1 * coop_2)
print(coop_1 / coop_2)
print(coop_1.make_order(21))
